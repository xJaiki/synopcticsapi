@{
    ViewData["Title"] = "Synoptic Viewer";
}

<div class="container-fluid p-0">
    <!-- Toolbar superiore -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <span class="navbar-brand">Synoptic Viewer</span>

            <div class="d-flex">
                <select id="synopticSelect" class="form-select me-2" style="width: 250px;">
                    <option value="">-- Select a synoptic --</option>
                </select>

                <button id="btnLoadSynoptic" class="btn btn-primary me-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-display" viewBox="0 0 16 16">
                        <path d="M0 4s0-2 2-2h12s2 0 2 2v6s0 2-2 2h-4q0 1 .25 1.5H11a.5.5 0 0 1 0 1H5a.5.5 0 0 1 0-1h.75Q6 13 6 12H2s-2 0-2-2zm1.398-.855a.76.76 0 0 0-.254.302A1.5 1.5 0 0 0 1 4.01V10c0 .325.078.502.145.602q.105.156.302.254a1.5 1.5 0 0 0 .538.143L2.01 11H14c.325 0 .502-.078.602-.145a.76.76 0 0 0 .254-.302 1.5 1.5 0 0 0 .143-.538L15 9.99V4c0-.325-.078-.502-.145-.602a.76.76 0 0 0-.302-.254A1.5 1.5 0 0 0 13.99 3H2c-.325 0-.502.078-.602.145" />
                    </svg> Load
                </button>

                <button id="btnInfo" class="btn btn-secondary me-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle" viewBox="0 0 16 16">
                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                        <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
                    </svg> Info
                </button>

                <button id="btnRefreshData" class="btn btn-success me-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z" />
                        <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466" />
                    </svg>Refresh Data
                </button>

                <!-- Aggiunti controlli per lo zoom -->
                <div class="btn-group me-2">
                    <button id="btnZoomIn" class="btn btn-outline-light">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-zoom-in" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0" />
                            <path d="M10.344 11.742q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1 6.5 6.5 0 0 1-1.398 1.4z" />
                            <path fill-rule="evenodd" d="M6.5 3a.5.5 0 0 1 .5.5V6h2.5a.5.5 0 0 1 0 1H7v2.5a.5.5 0 0 1-1 0V7H3.5a.5.5 0 0 1 0-1H6V3.5a.5.5 0 0 1 .5-.5" />
                        </svg>
                    </button>
                    <button id="btnZoomOut" class="btn btn-outline-light">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-zoom-out" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0" />
                            <path d="M10.344 11.742q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1 6.5 6.5 0 0 1-1.398 1.4z" />
                            <path fill-rule="evenodd" d="M3 6.5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 0 1h-6a.5.5 0 0 1-.5-.5" />
                        </svg>
                    </button>
                    <button id="btnZoomReset" class="btn btn-outline-light">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-fullscreen" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707m4.344 0a.5.5 0 0 1 .707 0l4.096 4.096V11.5a.5.5 0 1 1 1 0v3.975a.5.5 0 0 1-.5.5H11.5a.5.5 0 0 1 0-1h2.768l-4.096-4.096a.5.5 0 0 1 0-.707m0-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707m-4.344 0a.5.5 0 0 1-.707 0L1.025 1.732V4.5a.5.5 0 0 1-1 0V.525a.5.5 0 0 1 .5-.5H4.5a.5.5 0 0 1 0 1H1.732l4.096 4.096a.5.5 0 0 1 0 .707" />
                        </svg>
                    </button>
                </div>
                <span id="zoomLevel" class="text-light me-2" style="min-width: 60px;">100%</span>
            </div>
        </div>
    </nav>

    <!-- Modal per le informazioni -->
    <div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoModalLabel">Synoptic Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <tr>
                            <th>Layout Name:</th>
                            <td id="layoutName">-</td>
                        </tr>
                        <tr>
                            <th>Area ID:</th>
                            <td id="areaId">-</td>
                        </tr>
                        <tr>
                            <th>Elements Count:</th>
                            <td id="elementsCount">-</td>
                        </tr>
                        <tr>
                            <th>Status Legend:</th>
                            <td>
                                <div class="d-flex flex-column gap-2">
                                    <div class="d-flex align-items-center">
                                        <div style="width: 20px; height: 20px; background-color: #ffcccc; border: 1px solid #232323; margin-right: 10px;"></div>
                                        <span>Status 0 - Error</span>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <div style="width: 20px; height: 20px; background-color: #e5e5e5; border: 1px solid #232323; margin-right: 10px;"></div>
                                        <span>Status 1 - Idle</span>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <div style="width: 20px; height: 20px; background-color: #ccffcc; border: 1px solid #232323; margin-right: 10px;"></div>
                                        <span>Status 2 - Active</span>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <div style="width: 20px; height: 20px; background-color: #ffffcc; border: 1px solid #232323; margin-right: 10px;"></div>
                                        <span>Status 3 - Warning</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="modal-footer">
                    <div class="small text-muted me-auto">
                        Zoom Controls: Mouse Wheel or [+] and [-] keys
                    </div>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Visualizzatore SVG a schermo intero con controllo zoom e pan -->
    <div id="svgContainer" style="height: calc(100vh - 56px); width: 100%; background-color: #f5f5f5; display: flex; justify-content: center; align-items: center; overflow: hidden; position: relative;">
        <div id="synopticViewer" style="transform-origin: center center; transition: transform 0.1s ease; position: absolute; cursor: grab;">
            <div class="text-center text-muted p-5">
                <p>Select a synoptic from the dropdown and click "Load" to view it here.</p>
            </div>
        </div>
    </div>

    <!-- Spinner per il caricamento -->
    <div id="loadingSpinner" class="position-fixed top-50 start-50 translate-middle" style="display: none; z-index: 1050;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>



<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Elementi DOM
        const synopticSelect = document.getElementById('synopticSelect');
        const btnLoadSynoptic = document.getElementById('btnLoadSynoptic');
        const btnInfo = document.getElementById('btnInfo');
        const btnRefreshData = document.getElementById('btnRefreshData');
        const synopticViewer = document.getElementById('synopticViewer');
        const svgContainer = document.getElementById('svgContainer');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const btnZoomIn = document.getElementById('btnZoomIn');
        const btnZoomOut = document.getElementById('btnZoomOut');
        const btnZoomReset = document.getElementById('btnZoomReset');
        const zoomLevelDisplay = document.getElementById('zoomLevel');

        // Variabili per lo zoom e pan
        let currentZoom = 1;
        const zoomStep = 0.1;
        const minZoom = 0.1;
        const maxZoom = 5;

        // Variabili per il trascinamento (pan)
        let isPanning = false;
        let startX, startY;
        let translateX = 0;
        let translateY = 0;

        // Variabile per l'intervallo di aggiornamento automatico
        let autoRefreshInterval = null;
        const refreshInterval = 5000; // Intervallo di refresh in millisecondi (5 secondi)

        // Inizializzazione del modal Bootstrap
        const infoModal = new bootstrap.Modal(document.getElementById('infoModal'));

        // Variabile per memorizzare i dati del sinottico
        let synopticData = [];

        // Caricamento della lista all'avvio
        loadSynopticList();

        // Event listeners
        btnLoadSynoptic.addEventListener('click', loadSelectedSynoptic);
        btnInfo.addEventListener('click', showInfoModal);
        btnRefreshData.addEventListener('click', manualRefreshData);

        // Eventi per lo zoom
        btnZoomIn.addEventListener('click', () => zoomIn());
        btnZoomOut.addEventListener('click', () => zoomOut());
        btnZoomReset.addEventListener('click', resetZoom);
        svgContainer.addEventListener('wheel', handleMouseWheel);

        // Aggiunta eventi tastiera per lo zoom
        document.addEventListener('keydown', handleKeyboardZoom);

        // Eventi per il trascinamento (pan)
        synopticViewer.addEventListener('mousedown', startPan);
        document.addEventListener('mousemove', doPan);
        document.addEventListener('mouseup', endPan);
        document.addEventListener('mouseleave', endPan);

        function showInfoModal() {
            infoModal.show();
        }

        function showLoading() {
            loadingSpinner.style.display = 'block';
        }

        function hideLoading() {
            loadingSpinner.style.display = 'none';
        }

        // Funzioni per lo zoom
        function zoomIn() {
            if (currentZoom < maxZoom) {
                currentZoom = Math.min(currentZoom + zoomStep, maxZoom);
                applyZoom();
            }
        }

        function zoomOut() {
            if (currentZoom > minZoom) {
                currentZoom = Math.max(currentZoom - zoomStep, minZoom);
                applyZoom();
            }
        }

        function resetZoom() {
            currentZoom = 1;
            translateX = 0;
            translateY = 0;
            applyZoom();
        }

        function applyZoom() {
            synopticViewer.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentZoom})`;
            updateZoomDisplay();
        }

        function updateZoomDisplay() {
            zoomLevelDisplay.textContent = `${Math.round(currentZoom * 100)}%`;
        }

        // Funzioni per il trascinamento (pan)
        function startPan(e) {
            if (e.button !== 0) return; // Solo tasto sinistro del mouse

            isPanning = true;
            startX = e.clientX - translateX;
            startY = e.clientY - translateY;
            synopticViewer.style.cursor = 'grabbing';
            e.preventDefault();
        }

        function doPan(e) {
            if (!isPanning) return;

            translateX = e.clientX - startX;
            translateY = e.clientY - startY;
            applyZoom(); // Applica sia zoom che pan
            e.preventDefault();
        }

        function endPan() {
            isPanning = false;
            synopticViewer.style.cursor = 'grab';
        }

        function handleMouseWheel(event) {
            event.preventDefault();
            if (event.deltaY < 0) {
                zoomIn();
            } else {
                zoomOut();
            }
        }

        function handleKeyboardZoom(event) {
            // Controllo per i tasti + e -
            if (event.key === '+' || event.key === '=') {
                zoomIn();
            } else if (event.key === '-' || event.key === '_') {
                zoomOut();
            }
        }

        // Funzione per ottenere il colore in base allo stato
        function getStatusColor(status) {
            switch (parseInt(status)) {
                case 0: return '#ffcccc'; // Rosso chiaro - Error
                case 1: return '#e5e5e5'; // Grigio chiaro - Idle (default)
                case 2: return '#ccffcc'; // Verde chiaro - Active
                case 3: return '#ffffcc'; // Giallo chiaro - Warning
                default: return '#e5e5e5'; // Default
            }
        }

        // Funzione per aggiornare i dati nell'SVG
        function updateSvgData() {
            const svgElement = synopticViewer.querySelector('svg');
            if (!svgElement) return;

            // Per ogni elemento di dati, aggiorna l'SVG corrispondente
            synopticData.forEach(item => {
                const statusElement = svgElement.querySelector(`#${item.id}`);
                if (statusElement) {
                    // Aggiorna i testi
                    const nprogElement = statusElement.querySelector('.op-nprog');
                    const nseqElement = statusElement.querySelector('.op-nseq');
                    const modelElement = statusElement.querySelector('.op-model');

                    if (nprogElement) nprogElement.textContent = item.text1;
                    if (nseqElement) nseqElement.textContent = item.text2;
                    if (modelElement) modelElement.textContent = item.text3;

                    // Aggiorna il colore di sfondo del rettangolo
                    const rectElement = statusElement.querySelector('rect');
                    if (rectElement) {
                        rectElement.setAttribute('fill', getStatusColor(item.status));
                    }
                }
            });
        }

        // Funzione per avviare l'aggiornamento automatico
        function startAutoRefresh() {
            // Ferma ogni intervallo esistente prima di crearne uno nuovo
            stopAutoRefresh();

            // Crea un nuovo intervallo di aggiornamento
            autoRefreshInterval = setInterval(() => {
                refreshSvgData(false); // false = non mostrare il loading spinner
            }, refreshInterval);

            console.log('Auto-refresh started');
        }

        // Funzione per fermare l'aggiornamento automatico
        function stopAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
                console.log('Auto-refresh stopped');
            }
        }

        // Funzione per l'aggiornamento manuale (chiamata dal pulsante)
        function manualRefreshData() {
            refreshSvgData(true); // true = mostra il loading spinner
        }

        // Funzione per ottenere i dati aggiornati dal server
        function refreshSvgData(showLoader = false) {
            const selectedValue = synopticSelect.value;
            if (!selectedValue) return;

            if (showLoader) showLoading();

            fetch('/api/v2/GetSynopticData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    SynopticName: selectedValue
                })
            })
                .then(response => response.json())
                .then(result => {
                    // Verifica la struttura esatta della risposta con un console.log
                    console.log("Risposta API:", result);

                    if (result.DataItems && Array.isArray(result.DataItems)) {
                        // Utilizza i dati dalla struttura corretta
                        synopticData = result.DataItems.map(item => ({
                            id: item.Id,        // Assicurati che i nomi dei campi corrispondano
                            text1: item.Text1,
                            text2: item.Text2,
                            text3: item.Text3,
                            status: item.Status,
                            lastUpdate: item.LastUpdate
                        }));

                        // Aggiungi un log per verificare i dati dopo la mappatura
                        console.log("Dati mappati:", synopticData);

                        // Aggiorna l'SVG con i nuovi dati
                        updateSvgData();
                    } else {
                        console.error('Formato risposta non valido:', result);
                    }
                })
                .catch(error => {
                    console.error('Error refreshing data:', error);
                    if (showLoader) {
                        hideLoading();
                        alert('Error refreshing data. Please try again.');
                    }
                });
        }

        // Funzione per caricare la lista dei synoptic
        function loadSynopticList() {
            showLoading();

            fetch('/api/v2/GetSynopticList', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({})
            })
                .then(response => response.json())
                .then(result => {
                    if (result.SynopticList && Array.isArray(result.SynopticList)) {
                        // Pulisce le opzioni esistenti tranne la prima
                        while (synopticSelect.options.length > 1) {
                            synopticSelect.remove(1);
                        }

                        // Aggiunge le opzioni dalla risposta API
                        result.SynopticList.forEach(synoptic => {
                            const option = document.createElement('option');
                            option.value = synoptic.Name;
                            option.textContent = synoptic.Name;
                            option.dataset.areaId = synoptic.AreaId;
                            synopticSelect.appendChild(option);
                        });
                    } else {
                        console.error('Formato risposta non valido:', result);
                    }

                    hideLoading();
                })
                .catch(error => {
                    console.error('Errore nel recupero della lista synoptic:', error);
                    hideLoading();
                    alert('Errore nel caricamento della lista. Riprova.');
                });
        }

        // Funzione per caricare il synoptic selezionato
        function loadSelectedSynoptic() {
            const selectedValue = synopticSelect.value;

            if (!selectedValue) {
                alert('Seleziona un synoptic dalla lista.');
                return;
            }

            // Stop any existing auto-refresh
            stopAutoRefresh();

            showLoading();

            fetch('/api/v2/GetSynoptic', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    SynopticName: selectedValue
                })
            })
                .then(response => response.json())
                .then(result => {
                    if (result.SynopticList && result.SynopticList.length > 0) {
                        const synoptic = result.SynopticList[0];

                        // Aggiorna le informazioni nel modal
                        document.getElementById('layoutName').textContent = synoptic.Name;
                        document.getElementById('areaId').textContent = synoptic.AreaId;

                        // Renderizza SVG
                        synopticViewer.innerHTML = synoptic.Svg;

                        // Reset zoom quando si carica un nuovo synoptic
                        resetZoom();

                        // Processa l'SVG dopo il rendering
                        const svgElement = synopticViewer.querySelector('svg');
                        if (svgElement) {
                            // Rende l'SVG responsive
                            svgElement.style.width = '100%';
                            svgElement.style.height = '100%';
                            svgElement.style.maxHeight = '100%';
                            svgElement.style.maxWidth = '100%';

                            // Preserva l'aspect ratio
                            svgElement.setAttribute('preserveAspectRatio', 'xMidYMid meet');

                            // Conta gli elementi per il pannello info
                            const elementCount = svgElement.querySelectorAll('*').length;
                            document.getElementById('elementsCount').textContent = elementCount;

                            // Carica i dati iniziali
                            refreshSvgData(false);

                            // Avvia l'aggiornamento automatico
                            startAutoRefresh();
                        }
                    } else {
                        console.error('Formato risposta non valido o risultato vuoto:', result);
                        alert('Impossibile caricare il synoptic. Il server ha restituito una risposta non valida.');
                    }

                    hideLoading();
                })
                .catch(error => {
                    console.error('Errore nel recupero del synoptic:', error);
                    hideLoading();
                    alert('Errore nel caricamento del synoptic. Riprova.');
                });
        }

        // Assicurarsi che l'aggiornamento automatico si fermi quando la pagina viene chiusa o cambiata
        window.addEventListener('beforeunload', function () {
            stopAutoRefresh();
        });
    });
</script>