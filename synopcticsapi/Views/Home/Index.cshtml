@{
    ViewData["Title"] = "Synoptic Viewer";
}

<div class="container-fluid p-0">
    <!-- Toolbar superiore -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <span class="navbar-brand">Synoptic Viewer</span>

            <div class="d-flex">
                <select id="synopticSelect" class="form-select me-2" style="width: 250px;">
                    <option value="">-- Select a synoptic --</option>
                </select>

                <button id="btnLoadSynoptic" class="btn btn-primary me-2">
                    <i class="bi bi-display"></i> Load
                </button>

                <button id="btnInfo" class="btn btn-secondary">
                    <i class="bi bi-info-circle"></i> Info
                </button>
            </div>
        </div>
    </nav>

    <!-- Modal per le informazioni -->
    <div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="infoModalLabel">Synoptic Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <tr>
                            <th>Layout Name:</th>
                            <td id="layoutName">-</td>
                        </tr>
                        <tr>
                            <th>Area ID:</th>
                            <td id="areaId">-</td>
                        </tr>
                        <tr>
                            <th>Elements Count:</th>
                            <td id="elementsCount">-</td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Visualizzatore SVG a schermo intero -->
    <div id="svgContainer" style="height: calc(100vh - 56px); width: 100%; background-color: #f5f5f5; display: flex; justify-content: center; align-items: center;">
        <div id="synopticViewer" style="width: 100%; height: 100%; display: flex; justify-content: center; align-items: center;">
            <div class="text-center text-muted p-5">
                <p>Select a synoptic from the dropdown and click "Load" to view it here.</p>
            </div>
        </div>
    </div>

    <!-- Spinner per il caricamento -->
    <div id="loadingSpinner" class="position-fixed top-50 start-50 translate-middle" style="display: none; z-index: 1050;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Elementi DOM
        const synopticSelect = document.getElementById('synopticSelect');
        const btnLoadSynoptic = document.getElementById('btnLoadSynoptic');
        const btnInfo = document.getElementById('btnInfo');
        const synopticViewer = document.getElementById('synopticViewer');
        const loadingSpinner = document.getElementById('loadingSpinner');

        // Inizializzazione del modal Bootstrap
        const infoModal = new bootstrap.Modal(document.getElementById('infoModal'));

        // Caricamento della lista all'avvio
        loadSynopticList();

        // Event listeners
        btnLoadSynoptic.addEventListener('click', loadSelectedSynoptic);
        btnInfo.addEventListener('click', showInfoModal);

        function showInfoModal() {
            infoModal.show();
        }

        function showLoading() {
            loadingSpinner.style.display = 'block';
        }

        function hideLoading() {
            loadingSpinner.style.display = 'none';
        }

        // Funzione per caricare la lista dei synoptic
        function loadSynopticList() {
            showLoading();

            fetch('/api/v2/GetSynopticList', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({})
            })
                .then(response => response.json())
                .then(result => {
                    if (result.SynopticList && Array.isArray(result.SynopticList)) {
                        // Pulisce le opzioni esistenti tranne la prima
                        while (synopticSelect.options.length > 1) {
                            synopticSelect.remove(1);
                        }

                        // Aggiunge le opzioni dalla risposta API
                        result.SynopticList.forEach(synoptic => {
                            const option = document.createElement('option');
                            option.value = synoptic.Name;
                            option.textContent = synoptic.Name;
                            option.dataset.areaId = synoptic.AreaId;
                            synopticSelect.appendChild(option);
                        });
                    } else {
                        console.error('Formato risposta non valido:', result);
                    }

                    hideLoading();
                })
                .catch(error => {
                    console.error('Errore nel recupero della lista synoptic:', error);
                    hideLoading();
                    alert('Errore nel caricamento della lista. Riprova.');
                });
        }

        // Funzione per caricare il synoptic selezionato
        function loadSelectedSynoptic() {
            const selectedValue = synopticSelect.value;

            if (!selectedValue) {
                alert('Seleziona un synoptic dalla lista.');
                return;
            }

            showLoading();

            fetch('/api/v2/GetSynoptic', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    SynopticName: selectedValue
                })
            })
                .then(response => response.json())
                .then(result => {
                    if (result.SynopticList && result.SynopticList.length > 0) {
                        const synoptic = result.SynopticList[0];

                        // Aggiorna le informazioni nel modal
                        document.getElementById('layoutName').textContent = synoptic.Name;
                        document.getElementById('areaId').textContent = synoptic.AreaId;

                        // Renderizza SVG
                        synopticViewer.innerHTML = synoptic.Svg;

                        // Processa l'SVG dopo il rendering
                        const svgElement = synopticViewer.querySelector('svg');
                        if (svgElement) {
                            // Rende l'SVG responsive
                            svgElement.style.width = '100%';
                            svgElement.style.height = '100%';
                            svgElement.style.maxHeight = '100%';
                            svgElement.style.maxWidth = '100%';

                            // Preserva l'aspect ratio
                            svgElement.setAttribute('preserveAspectRatio', 'xMidYMid meet');

                            // Conta gli elementi per il pannello info
                            const elementCount = svgElement.querySelectorAll('*').length;
                            document.getElementById('elementsCount').textContent = elementCount;
                        }
                    } else {
                        console.error('Formato risposta non valido o risultato vuoto:', result);
                        alert('Impossibile caricare il synoptic. Il server ha restituito una risposta non valida.');
                    }

                    hideLoading();
                })
                .catch(error => {
                    console.error('Errore nel recupero del synoptic:', error);
                    hideLoading();
                    alert('Errore nel caricamento del synoptic. Riprova.');
                });
        }
    });
</script>